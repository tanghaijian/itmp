<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.pioneeruniverse.project.dao.mybatis.assetLibrary.SystemDirectoryDao">
	<!-- 获取某个项目下所有的目录 -->
	<select id="getAllDirectoryByProjectId" parameterType="Long" resultMap="systemDirectoryMap">
		select tsd.ID,
      tsd.PROJECT_ID,
      tsd.CREATE_TYPE,
      tsd.PROJECT_TYPE,
      tsd.DOCUMENT_TYPES,
      tsd.PARENT_ID,
      tsd.PARENT_IDS,
      tsd.DIR_NAME,
      tsd.CREATE_TYPE
      FROM tbl_system_directory tsd
       WHERE
      tsd.PROJECT_TYPE = 1
      AND tsd.PROJECT_ID = #{projectId}
       AND tsd.STATUS = 1
      ORDER BY tsd.DIR_NAME,tsd.ORDER_NUMBER
	</select>
	<!-- 获取某个新建类项目下的所有目录 -->
	<select id="getAllDirectoryByNewProjectId" parameterType="Long" resultMap="systemDirectoryMap">
		select tsd.ID,
      tsd.PROJECT_ID,
      tsd.CREATE_TYPE,
      tsd.PROJECT_TYPE,
      tsd.DOCUMENT_TYPES,
      tsd.PARENT_ID,
      tsd.PARENT_IDS,
      tsd.DIR_NAME,
      tsd.CREATE_TYPE
      FROM tbl_system_directory tsd
       WHERE
      tsd.PROJECT_TYPE = 2
      AND tsd.PROJECT_ID = #{projectId}
       AND tsd.STATUS = 1
      ORDER BY tsd.DIR_NAME,tsd.ORDER_NUMBER
	</select>
	
	<!-- 获取新建类项目下的文档库类型的目录 -->
    <select id="getDirectoryTreeForDocumentLibrary" resultMap="systemDirectoryTreeMap">
      SELECT
      tsd.ID,
      tsd.PROJECT_ID,
      tsd.CREATE_TYPE,
      tsd.PROJECT_TYPE,
      tsd.DOCUMENT_TYPES,
      tsd.PARENT_ID,
      tsd.PARENT_IDS,
      tsd.DIR_NAME,
      tsd.CREATE_TYPE
      FROM tbl_system_directory tsd
      WHERE
      tsd.PROJECT_TYPE = 2
      AND tsd.PROJECT_ID = #{projectId}
      AND tsd.PARENT_ID = 0
      AND tsd.STATUS = 1
      AND tsd.DIRECTORY_TYPE = 1
      ORDER BY tsd.DIR_NAME,tsd.ORDER_NUMBER
    </select>

<!-- 获取某个项目下的目录以及该目录的子目录 -->
    <select id="getAllSonDirectoryIds" parameterType="cn.pioneeruniverse.project.entity.TblSystemDirectory"
            resultType="java.lang.Long">
        SELECT ID
        FROM tbl_system_directory
        WHERE STATUS = 1
        AND PROJECT_ID = #{projectId}
        AND PROJECT_TYPE = 2
        AND CREATE_TYPE = 2
        AND (LOCATE(CONCAT(',',#{id},','),PARENT_IDS) OR ID = #{id})
    </select>

<!-- 通过项目和系统获取系统目录 -->
    <select id="getSystemDirectoryListForZtree" resultMap="systemDirectoryTreeMap">
        SELECT
        tsd.ID,
        tsd.DIR_NAME,
        tsd.SYSTEM_ID,
        tsd.PARENT_ID,
        tsd.PARENT_IDS,
        tsd.CREATE_TYPE
        FROM tbl_system_directory tsd
        <if test="projectId != null">
            LEFT JOIN tbl_project_system tps ON tps.SYSTEM_ID = tsd.SYSTEM_ID
        </if>
        WHERE
        tsd.PROJECT_TYPE = 2
        <if test="systemIds != null and systemIds != ''">
            AND tsd.SYSTEM_ID IN
            <foreach collection="systemIds.split(',')" item="item1" open="(" separator="," close=")"
                     index="index1">
                #{item1}
            </foreach>
        </if>
        <if test="projectId != null">
            AND tps.PROJECT_ID = #{projectId}
        </if>
        AND tsd.PARENT_ID = 0
        AND tsd.STATUS = 1
        ORDER BY tsd.DIR_NAME,tsd.ORDER_NUMBER
    </select>

<!-- 获取某个目录的默认的文档类型，存储于目录模板中，一般新建的时候带出 -->
    <select id="getDirectoryTypes" resultMap="systemDirectoryDTOMap">
        SELECT
        tsd.ID,
        tsd.PARENT_ID,
        tsdt.DOCUMENT_TYPE2S
        FROM tbl_system_directory tsd
        LEFT JOIN tbl_system_directory_template tsdt ON tsd.SYSTEM_DIRECTORY_TEMPLATE_ID = tsdt.ID AND
        tsd.CREATE_TYPE = 1 AND tsdt.PROJECT_TYPE = 2 AND tsdt.STATUS = 1
        WHERE tsd.ID = #{directoryId} AND tsd.PROJECT_TYPE = 2 AND tsd.STATUS = 1
    </select>
    
    <!-- 获取某个目录的详情 -->
	 <select id="selectByDirectory" parameterType="java.lang.Long"
            resultMap="systemDirectoryMap">
        SELECT ID,PROJECT_TYPE,DIR_NAME,ORDER_NUMBER,TIER_NUMBER,CREATE_TYPE
        FROM tbl_system_directory
        WHERE 
         ID=#{id}
    </select>
    
    <!-- 获取某个目录的文档类型 -->
	 <select id="getDocumentType" resultMap="systemDirectoryDTOMap">
        SELECT
        tsd.ID,
        tsd.PROJECT_ID,
        tsd.PARENT_ID,
        tsd.PARENT_IDS,
        tsd.DOCUMENT_TYPES
        FROM tbl_system_directory tsd
        WHERE tsd.ID = #{directoryId} AND tsd.STATUS = 1
    </select>
    
    <!-- 物理删除莫格目录以及它的子目录 -->
    <delete id="delSystemDirectory" parameterType="cn.pioneeruniverse.project.entity.TblSystemDirectory">
        DELETE FROM tbl_system_directory WHERE LOCATE(CONCAT(',',#{id},','),PARENT_IDS) OR ID = #{id}
    </delete>

   <!-- 物理删除某个系统下的目录 -->
    <delete id="delSystemDirectoryBySystemId">
        DELETE FROM tbl_system_directory WHERE SYSTEM_ID = #{systemId}
    </delete>

   <!-- 批量删除目录 -->
    <delete id="delSystemDirectoriesByIds">
        DELETE FROM tbl_system_directory WHERE ID IN
        <foreach collection="directoryIds" item="item1" open="(" separator="," close=")"
                 index="index1">
            #{item1}
        </foreach>
    </delete>

  <!-- 添加目录 -->
    <insert id="addSystemDirectory" parameterType="cn.pioneeruniverse.project.entity.TblSystemDirectory"
            useGeneratedKeys="true" keyProperty="id">
       INSERT INTO tbl_system_directory(
        PROJECT_ID,
        PROJECT_TYPE,
        DOCUMENT_TYPES,
        DIR_NAME,
        ORDER_NUMBER,
        TIER_NUMBER,
        PARENT_ID,
        PARENT_IDS,
        CREATE_TYPE,
        STATUS,
        CREATE_BY,
        CREATE_DATE,
        LAST_UPDATE_BY,
        LAST_UPDATE_DATE
        ) VALUES (
         #{projectId},
         #{projectType},
         #{documentTypes},
         #{dirName},
         #{orderNumber},
         #{tierNumber},
         #{parentId},
         #{parentIds},
         #{createType},
         #{status},
         #{createBy},
         #{createDate},
         #{lastUpdateBy},
         #{lastUpdateDate}
        )
    </insert>
    
    <!-- 获取 parentId这个目录的下一级目录,只获取一层 -->
    <select id="getSonDirectory" resultMap="systemDirectoryMap">
     SELECT
     tsd.ID,
     tsd.PROJECT_TYPE,
     tsd.PROJECT_ID,
     tsd.PARENT_ID,
     tsd.PARENT_IDS,
     tsd.DOCUMENT_TYPES,
     tsd.DIR_NAME,
     tsd.CREATE_TYPE
     FROM tbl_system_directory tsd
     WHERE
     tsd.PARENT_ID = #{parentId}
     AND tsd.PROJECT_ID = #{projectId}
     AND tsd.PROJECT_TYPE = 2
     AND tsd.STATUS = 1
     ORDER BY tsd.DIR_NAME,tsd.ORDER_NUMBER
    </select>

    <!-- 获取 parentId这个目录的下一级目录 ，返回类型带children:递归获取每一个子目录的子目录-->
    <select id="getSystemDirectoryChildrenNodes" resultMap="systemDirectoryTreeMap">
     SELECT
     tsd.ID,
     tsd.PROJECT_TYPE,
     tsd.PROJECT_ID,
     tsd.PARENT_ID,
     tsd.PARENT_IDS,
     tsd.DOCUMENT_TYPES,
     tsd.DIR_NAME,
     tsd.CREATE_TYPE
     FROM tbl_system_directory tsd
     WHERE
     tsd.PARENT_ID = #{parentId}
     AND tsd.PROJECT_ID = #{projectId}
     AND tsd.PROJECT_TYPE = 2
     AND tsd.STATUS = 1
     ORDER BY tsd.DIR_NAME,tsd.ORDER_NUMBER
    </select>
    <!-- 重命名目录名称 -->
    <update id="updateSystemDirectoryName" parameterType="cn.pioneeruniverse.project.entity.TblSystemDirectory">
        UPDATE tbl_system_directory SET DIR_NAME = #{dirName} WHERE ID = #{id}
    </update>
    
    <!-- 获取关联有文档目录的系统的相关信息 -->
	<select id="selectSystemByProject" parameterType="java.lang.Long" resultType="map">
	SELECT DISTINCT system.ID as systemId,
	system.SYSTEM_NAME as systemName
	 FROM tbl_system_directory systemDirectory
		LEFT JOIN tbl_project_system projectSystem
		ON systemDirectory.PROJECT_ID=projectSystem.PROJECT_ID
		LEFT JOIN tbl_system_info system
		ON  projectSystem.SYSTEM_ID=system.ID
		WHERE system.`STATUS`=1 AND projectSystem.`STATUS`=1
		AND systemDirectory.`STATUS` AND systemDirectory.PROJECT_ID=#{projectId}
	</select>

    <resultMap type="cn.pioneeruniverse.project.entity.TblSystemDirectory" id="systemDirectoryMap">
        <id column="ID" property="id"/>
        <result column="DIRECTORY_TYPE" property="directoryType"/>
        <result column="SYSTEM_ID" property="systemId"/>
        <result column="PROJECT_ID" property="projectId"/>
        <result column="PROJECT_TYPE" property="projectType"/>
        <result column="DOCUMENT_TYPES" property="documentTypes"/>
        <result column="DIR_NAME" property="dirName"/>
        <result column="ORDER_NUMBER" property="orderNumber"/>
        <result column="TIER_NUMBER" property="tierNumber"/>
        <result column="PARENT_ID" property="parentId"/>
        <result column="PARENT_IDS" property="parentIds"/>
        <result column="CREATE_TYPE" property="createType"/>
        <result column="STATUS" property="status"/>
        <result column="CREATE_BY" property="createBy"/>
        <result column="CREATE_DATE" property="createDate"/>
        <result column="LAST_UPDATE_BY" property="lastUpdateBy"/>
        <result column="LAST_UPDATE_DATE" property="lastUpdateDate"/>
    </resultMap>

    <resultMap type="cn.pioneeruniverse.project.entity.TblSystemDirectory" id="systemDirectoryTreeMap"
               extends="systemDirectoryMap">
        <collection property="children" column="{parentId=ID,projectId=PROJECT_ID}"
                    ofType="cn.pioneeruniverse.project.entity.TblSystemDirectory"
                    select="getSystemDirectoryChildrenNodes">
        </collection>
    </resultMap>

    <resultMap type="cn.pioneeruniverse.project.entity.TblSystemDirectory" id="systemDirectoryDTOMap"
               extends="systemDirectoryMap">
        <result column="DOCUMENT_TYPE2S" property="documentType2s"/>
    </resultMap>

</mapper>